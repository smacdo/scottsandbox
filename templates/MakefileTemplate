#############################################################################
# Scott's Awesome Makefile Template (Revision 3)
#############################################################################
OUTBIN  = PROJECT_NAME_HERE
TESTBIN = PROJECT_NAME_HERE-testrunner
SRCS    = $(patsubst src/%,%,$(wildcard src/*.cpp))
TESTS   = $(patsubst tests/%,%,$(wildcard tests/test_*.cpp))

CCFLAGS = -Iinclude/ -Wall -Werror
LDFLAGS = 
LIBS    =

CC_TEST = -I/usr/include/UnitTest++
LD_TEST = -lunittest++

BUILDMODE = "debug"

#############################################################################
# Debug mode flags
#############################################################################
DEBUG_CCFLAGS   = -g
DEBUG_LDFLAGS   =
DEBUG_LIBS      =
DEBUG_TARGETS  := $(OUTBIN) $(TESTBIN)

#############################################################################
# Release mode flags
#############################################################################
RELEASE_CCFLAGS =
RELEASE_LDFLAGS =
RELEASE_LIBS    =
RELEASE_TARGETS:= $(OUTBIN)

#############################################################################
# Autogenerated variables
#############################################################################
SRCS      := $(filter-out main.cpp, $(filter-out testmain.cpp, $(SRCS)))

APP_SRCS  := $(patsubst %.cpp,src/%.cpp,$(SRCS))
APP_OBJS  := $(patsubst %.cpp,.build/%.o,$(SRCS))
APP_DEPS  := $(patsubst %.cpp,.build/%.o,$(SRCS))

TEST_SRCS := $(patsubst %.cpp,tests/%.cpp,$(TESTS))
TEST_OBJS := $(patsubst %.cpp,.build/%.o,$(TESTS))
TEST_DEPS := $(patsubst %.cpp,.build/%.o,$(TESTS))

ALL_SRCS  := $(APP_SRCS) $(TEST_SRCS) src/main.cpp src/testmain.cpp

ifeq ($(BUILDMODE),"debug")
	CCFLAGS += $(DEBUG_CCFLAGS)
	LDFLAGS += $(DEBUG_LDFLAGS)
	LIBS    += $(DEBUG_LIBS)
	TARGETS  = $(DEBUG_TARGETS)
else
	CCFLAGS += $(RELEASE_CCFLAGS)
	LDFLAGS += $(RELEASE_LDFLAGS)
	LIBS    += $(RELEASE_LIBS)
	TARGETS  = $(RELEASE_TARGETS)
endif

CURRTIME = $(shell date +"%Y_%m_%d-%H.%M.%S")

#############################################################################
# Targets
#############################################################################
.PHONY: all
.PRECIOUS: Makefile

all: $(TARGETS)

run: $(OUTBIN)
	./$(OUTBIN)

test: $(TESTBIN)
	./$(TESTBIN)

test-cov: $(TESTBIN)
	./$(TESTBIN)
	mkdir -p .build/coverage
	lcov -b . --directory .build --capture --output-file .build/raw_coverage.info
	lcov -o .build/coverage.info -e .build/raw_coverage.info               \
         `pwd`/src/\*.cpp `pwd`/include/\*.h\* `pwd`/tests/\*.cpp
	genhtml .build/coverage.info --output-directory .build/coverage

test-mem: $(TESTBIN)
	mkdir -p .build
	valgrind ./$(TESTBIN) --log-file=".build/test-valgrind.txt"
	      --leak-check=full --track-origins=yes --verbose

valgrind: $(OUTBIN)
	mkdir -p logs/valgrind/
	valgrind ./$(OUTBIN) --log-file="logs/valgrind/$(CURRTIME).txt" \
	      --leak-check=full --track-origins=yes --verbose

tarball:
	tar -czf $(OUTBIN).tar Makefile src/* include/* tests/*

dist: tarball

check: $(TESTBIN)
	$(info Run a script to automate testing)

install:
	$(error Install is not implemented)

uninstall:
	$(error Uninstall is not implemented)

$(OUTBIN): $(APP_OBJS) .build/main.o
	@echo "LINK   : $(OUTBIN)"
	@g++ $(APP_OBJS) .build/main.o -o $(OUTBIN) $(LDFLAGS) $(LIBS)

$(TESTBIN): $(APP_OBJS) $(TEST_OBJS) .build/testmain.o
	@echo "LINK   : $(TESTBIN)"
	@g++ $(APP_OBJS) $(TEST_OBJS) .build/testmain.o -o $(TESTBIN) \
		 $(LDFLAGS) $(LD_TEST) $(LIBS)

.build/testmain.o: src/testmain.cpp
	@mkdir -p .build
	@echo "COMPILE: $<"
	@g++ $(CCFLAGS) -MD -c $< $(CC_TEST) -o $@

.build/test_%.o: tests/test_%.cpp
	@mkdir -p .build
	@echo "COMPILE: $<"
	@g++ $(CCFLAGS) -MD -c $< $(CC_TEST) -o $@

.build/%.o: src/%.cpp
	@mkdir -p .build
	@echo "COMPILE: $<"
	@g++ $(CCFLAGS) -MD -c $< -o $@

distclean: clean

clean:
	$(info DELETE: ./build)
	@rm -rf .build
	@echo DELETE: $(OUTBIN)
	@rm -f $(OUTBIN) 
	@echo DELETE: $(TESTBIN)
	@rm -f $(TESTBIN)
	@echo " "
	@echo "Cleaned everything!"

print-%:
	@echo $* = $($*)

#############################################################################
# Pull in dependencies
#############################################################################
-include $(APP_OBJS:.o=.d)
-include $(TEST_OBJS:.o=.d)
